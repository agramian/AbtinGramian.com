package com.Engine.HID {	import flash.display.Sprite;	import flash.events.EventDispatcher;	import flash.events.Event;	import flash.display.DisplayObject;		public class HIDManager extends Sprite{				//SINGLETON INSTANCE		static private var _instance:HIDManager;		protected var _hidSetting:int;		public static const MOUSE_KEYBOARD:int = 1;		protected var _mouse:MouseHID;		protected var _keyboard:KeyboardHID;						//CONSTRUCTOR - NOT ACCESSIBLE MORE THAN ONCE		public function HIDManager(validator:HIDManagerSingleton) {			if (_instance) throw new Error("HIDManager is a Singleton class. Use getInstance() to retrieve the existing instance.");		}				static public function getInstance():HIDManager {			if (!_instance) _instance = new HIDManager(new HIDManagerSingleton());			return _instance;		}				/*HID MANAGER METHODS*/				public function get mouse():MouseHID { return _mouse; }		public function get keyboard():KeyboardHID { return _keyboard; }				public function addHIDManagerListeners() {			if (_hidSetting == MOUSE_KEYBOARD) {				_mouse.resetMouse();				_keyboard.resetKeyboard();				_mouse.addMouseHIDListeners();				_keyboard.addKeyboardHIDListeners();			}		}				public function removeHIDManagerListeners() {			if (_hidSetting == MOUSE_KEYBOARD) {				_mouse.removeMouseHIDListeners();				_keyboard.removeKeyboardHIDListeners();			}		}				public function setHIDMouseKeyboard() {			_mouse = new MouseHID();			_keyboard = new KeyboardHID();			_hidSetting = MOUSE_KEYBOARD;			addChild(_mouse);			addChild(_keyboard);		}		//END HID MANAGEMENT	}}class HIDManagerSingleton {}