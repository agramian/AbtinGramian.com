package com.Engine.Level {		import AbtinPat.Player;	import AbtinPat.GameHUD;	import AbtinPat.Item;	import AbtinPat.Turret;	import AbtinPat.FlyingEnemy;	import flash.events.EventDispatcher;			import flash.display.DisplayObject;	import flash.display.Sprite;	import flash.display.BitmapData;	import flash.display.Loader;	import flash.events.Event;	import flash.events.IOErrorEvent;	import flash.events.ProgressEvent;	import flash.events.SecurityErrorEvent;	import flash.net.*;	import flash.system.ApplicationDomain;	import flash.system.LoaderContext;	import flash.utils.getQualifiedClassName;	import flash.events.IOErrorEvent;	import flash.net.URLRequest;	import flash.utils.getDefinitionByName;		import com.Engine.events.APEvent;	import com.Engine.Sprites.*;		public class LevelManager extends Sprite{				//SINGLETON INSTANCE		static private var _instance:LevelManager;				protected var _currentLevel:XML;		protected var _items:Array;		protected var _enemies:Array;		protected var _enemyList:Vector.<IEnemy>;		protected var _levels:Array;		protected var _player:IPlayer;		protected var _gameHUD:GameHUD;		protected var _assetDomain:ApplicationDomain;		protected var _assetPath;		protected var _assetQueue;		protected var _assets;		protected var _laserClass:Class;		protected var _missileClass:Class;		protected var _playerUpClass:Class;		protected var _playerDownClass:Class;		protected var _playerUp2Class:Class;		protected var _playerDown2Class:Class;		protected var _playerUp3Class:Class;		protected var _playerDown3Class:Class;		protected var _backgroundClass:Class;		protected var _asteroidGroupClass:Class;		protected var _asteroidSingleClass:Class;		protected var _redOrbClass:Class;		protected var _blueOrbClass:Class;		protected var _yellowOrbClass:Class;		protected var _greenOrbClass:Class;		protected var _explosionClass:Class;		protected var _enemyDamage1Class:Class;		protected var _enemyDamage2Class:Class;		protected var _crossHair1Class:Class;		protected var _crossHair2Class:Class;				//CONSTRUCTOR - NOT ACCESSIBLE MORE THAN ONCE		public function LevelManager(validator:LevelManagerSingleton) {			if (_instance) throw new Error("LevelManager is a Singleton class. Use getInstance() to retrieve the existing instance.");			_assetDomain = new ApplicationDomain(ApplicationDomain.currentDomain);		}				static public function getInstance():LevelManager {			if (!_instance) _instance = new LevelManager(new LevelManagerSingleton());			return _instance;		}				/*LEVEL MANAGER METHODS*/		public function unloadLevel() {			//_items = null;			_enemies = null;			_levels = null;			_player = null;			_gameHUD = null;			for each(var loader:Loader in _assets) {				loader.unload();			}			_assets = null;			_assetQueue = null;		}				public function get player():IPlayer { return _player; };		public function get gameHUD():GameHUD { return _gameHUD; };		public function get laserClass():Class { return _laserClass; };		public function get missileClass():Class { return _missileClass; };		public function get playerUpClass():Class { return _playerUpClass; };		public function get playerDownClass():Class { return _playerDownClass; };		public function get playerUp2Class():Class { return _playerUp2Class; };		public function get playerDown2Class():Class { return _playerDown2Class; };		public function get playerUp3Class():Class { return _playerUp3Class; };		public function get playerDown3Class():Class { return _playerDown3Class; };		public function get backgroundClass():Class { return _backgroundClass; };		public function get redOrbClass():Class { return _redOrbClass; };		public function get blueOrbClass():Class { return _blueOrbClass; };		public function get yellowOrbClass():Class { return _yellowOrbClass; };		public function get greenOrbClass():Class { return _greenOrbClass; };		public function get items():Array { return _items; };		public function get asteroidGroupClass():Class { return _asteroidGroupClass; };		public function get asteroidSingleClass():Class { return _asteroidSingleClass; };		public function get enemyList():Vector.<IEnemy> { return _enemyList; };		public function get explosionClass():Class { return _explosionClass; };		public function get enemyDamage1Class():Class { return _enemyDamage1Class; };		public function get enemyDamage2Class():Class { return _enemyDamage2Class; };		public function get crossHair1Class():Class { return _crossHair1Class; };		public function get crossHair2Class():Class { return _crossHair2Class; };				public function loadLevel(uri:String):void  {			_assetPath = "";			_assetQueue = new Vector.<String>();			_assets = new Vector.<Loader>();							var request:URLRequest = new URLRequest(uri);			var levelLoader:URLLoader = new URLLoader(request);			levelLoader.addEventListener(Event.COMPLETE, levelLoaded, false, 0, true);			levelLoader.addEventListener(IOErrorEvent.IO_ERROR, levelError, false, 0, true);			levelLoader.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityError, false, 0, true);		}				protected function levelLoaded(e:Event):void {			_currentLevel = XML(e.target.data);			var assets:XMLList = _currentLevel.assets.children();			for (var i:int = 0; i < assets.length(); i++) {				_assetQueue.push(assets[i].@file);			}			loadNextAsset();		}				protected function levelError(e:IOErrorEvent):void {			trace("APEngine: Error Loading Level:",e.text);		}				protected function securityError(e:SecurityErrorEvent):void {			trace("SecurityError:",e.text);		}		//END LEVEL MANAGEMENT					//ASSET MANAGEMENT		protected function loadNextAsset(e:Event = null):void {			var loader:Loader = new Loader();			var nextAsset:String = _assetQueue[_assets.length];			var context:LoaderContext = new LoaderContext(false, _assetDomain);			loader.load(new URLRequest(_assetPath + nextAsset), context);			loader.contentLoaderInfo.addEventListener(Event.COMPLETE, assetsLoaded, false, 0, true);			loader.contentLoaderInfo.addEventListener(ProgressEvent.PROGRESS, assetLoadProgress, false, 0, true);			loader.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, assetLoadError, false, 0, true);			loader.contentLoaderInfo.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityError, false, 0, true);			_assets.push(loader);		}				protected function assetsLoaded(e:Event):void {			if (_assets.length < _assetQueue.length) {				loadNextAsset();				return;			}			createLevel();			dispatchEvent(new APEvent(APEvent.LEVEL_LOAD_COMPLETE));		}				protected function assetLoadProgress(e:ProgressEvent):void {			var baseCompletion:Number = 100 * (_assets.length-1)/_assetQueue.length;			var currentProgress:Number = (100/_assetQueue.length) * (e.bytesLoaded/e.bytesTotal);			var bytesLoaded:int = Math.round(baseCompletion + currentProgress);			dispatchEvent(new ProgressEvent(ProgressEvent.PROGRESS, false, false, bytesLoaded, 100));		}				protected function assetLoadError(e:IOErrorEvent):void {			trace("APEngine: Error Loading Asset: ",_assetQueue[_assets.length-1]);		}				protected function getAssetClass(assetName:String):Class {			if (_assetDomain.hasDefinition(assetName)) {				return _assetDomain.getDefinition(assetName) as Class;			}			throw new ArgumentError("Asset Class "+assetName+" cannot be found in loaded asset files.");		}		//END ASSET MANAGEMENT					//BEGIN LEVEL CREATION		protected function createLevel():void {			//createLevels();						//createItems();			//CREATE PLAYER			_playerUpClass = getAssetClass("PlayerUp");			_playerDownClass = getAssetClass("PlayerDown");			_playerUp2Class = getAssetClass("PlayerUp2");			_playerDown2Class = getAssetClass("PlayerDown2");			_playerUp3Class = getAssetClass("PlayerUp3");			_playerDown3Class = getAssetClass("PlayerDown3");						_player = new _playerUpClass();			var playerInfo:XMLList = _currentLevel.player.children();			_player.tempX = _player.x = playerInfo[0].@x; 			_player.tempY = _player.y = playerInfo[0].@y;						var gameHUDClass:Class = getAssetClass("GameHUD");			_gameHUD = new gameHUDClass();			_gameHUD.x = 320;			_gameHUD.y = 466;						_crossHair1Class = getAssetClass("CrossHair1");			_crossHair2Class = getAssetClass("CrossHair2");						_laserClass = getAssetClass("Laser");			_missileClass = getAssetClass("Missile");						var assets:XMLList = _currentLevel.assets.children();						_backgroundClass = getAssetClass(assets[0].@backgroundClass);						_asteroidGroupClass = getAssetClass("AsteroidGroup");			_asteroidSingleClass = getAssetClass("AsteroidSingle");						_explosionClass = getAssetClass("Explosion");						_enemyDamage1Class = getAssetClass("EnemyDamage1");			_enemyDamage2Class = getAssetClass("EnemyDamage2");						var items:XMLList = _currentLevel.items.children();			_yellowOrbClass = getAssetClass("YellowOrb");			_redOrbClass = getAssetClass("RedOrb");			_blueOrbClass = getAssetClass("BlueOrb");			_greenOrbClass = getAssetClass("GreenOrb");						createEnemies();		}				protected function createEnemies():void {			_enemyList = new Vector.<IEnemy>();			var enemies:XMLList = _currentLevel.enemies.children();			for (var i:int = 0; i < enemies.length(); i++) {				var enemyClass:Class = getAssetClass(enemies[i].@spriteClass);				var enemySprite:IEnemy = new enemyClass();				enemySprite.x = enemySprite.tempX = Number(enemies[i].@x);				enemySprite.y = enemySprite.tempY = Number(enemies[i].@y);				enemySprite.name = enemies[i].@name;				_enemyList.push(enemySprite);			}						/*			_enemies = new Array();			var enemies:XMLList = _currentLevel.enemies.children();			for (var i:int = 0; i < enemies.length(); i++) {				var enemyClass:Class = getAssetClass(enemies[i].@spriteClass);				var enemySprite:IEnemy = new enemyClass();				enemySprite.x = Number(enemies[i].@x);				enemySprite.y = Number(enemies[i].@y);				enemySprite.name = enemies[i].@name;				_enemies.push(enemySprite);			}			*/		}		/*		protected function createItems():void {			_items = new Array();			var items:XMLList = _currentLevel.items.children();			for (var i:int = 0; i < items.length(); i++) {				var itemClass:Class = getAssetClass(items[i].@spriteClass);				var itemSprite:IItem = new itemClass();				itemSprite.x = Number(items[i].@x);				itemSprite.y = Number(items[i].@y);				itemSprite.points = Number(items[i].@points);				itemSprite.name = items[i].@name;				itemSprite.type = items[i].@type;				_items.push(itemSprite);			}		}		*/		protected function createLevels():void {			/*_levels = new Array();			var levels:XMLList = _currentLevel.levels.children();			for (var i:int = 0; i < levels.length(); i++) {				var levelsClass:Class = getAssetClass(levels[i].@spriteClass);				var levelSprite:ILevel = new levelClass();				levelSprite.x = Number(levels[i].@x) * Number(_currentLevel);				levelSprite.y = Number(levels[i].@y) * Number(_currentLevel);				levelSprite.destination = levels[i].@destination;				for each (var requirement:XML in levels[i].requirement) {					levelSprite.requirements.push(new LevelRequirement(requirement.@type, requirement.@name));				}				_levels.push(levelSprite);				addChild(levelSprite as DisplayObject);			}*/		}		//END LEVEL CREATION	}}class LevelManagerSingleton {}