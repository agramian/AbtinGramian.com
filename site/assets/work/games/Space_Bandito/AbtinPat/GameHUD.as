package AbtinPat{	import flash.display.DisplayObject;	import flash.display.SimpleButton;	import flash.text.TextField;	import flash.events.MouseEvent;		import flash.display.MovieClip;	import com.Engine.events.APEvent;	import com.Engine.Sound.SoundEngine;	import com.greensock.*;	import com.greensock.easing.*; 	import com.greensock.plugins.*;	TweenPlugin.activate([BlurFilterPlugin]);		public class GameHUD extends MovieClip {		public var timeElapsedText:TextField;		//public var pointsText:TextField;		private var currentWeapon:DisplayObject;		private var redBar:DisplayObject;		private var blueBar:DisplayObject;		private var greenBar:DisplayObject;		private var yellowBar:DisplayObject;		private var redBarBack:DisplayObject;		private var blueBarBack:DisplayObject;		private var greenBarBack:DisplayObject;		private var yellowBarBack:DisplayObject;		protected var se:SoundEngine;				public function initializeGameHUD():void {			se = SoundEngine.getInstance();			currentWeapon = getChildByName("currentWeapon");			redBar = getChildByName("redBar");			blueBar = getChildByName("blueBar");			greenBar = getChildByName("greenBar");			yellowBar = getChildByName("yellowBar");						redBarBack = getChildByName("redBarBack");			redBarBack.scaleX = 14;			redBarBack.alpha = 0.2;			blueBarBack = getChildByName("blueBarBack");			blueBarBack.scaleX = 14;			blueBarBack.alpha = 0.2;			greenBarBack = getChildByName("greenBarBack");			greenBarBack.scaleX = 14;			greenBarBack.alpha = 0.2;			yellowBarBack = getChildByName("yellowBarBack");			yellowBarBack.scaleX = 14;			yellowBarBack.alpha = 0.2;						adjustBlueBar(0);			adjustGreenBar(0);			adjustRedBar(0);			//adjustYellowBar(100);		}				public function updateTimeElapsed(value:String):void {			timeElapsedText.text = value;		}				public function updatePointsText(value:String):void {			//pointsText.text = value;		}				public function adjustRedBar(value:int) {			if (value > 30)				value = 30;			var barPercentage:Number = 14 * value / 30;			redBar.scaleX = barPercentage;			redBar.alpha = 1.0;			if ( barPercentage == 0 ) {				redBar.alpha = 0.0;			}		}		public function maxRedBar() {			TweenLite.to(redBar, 0.25, { blurFilter: { blurX:5, blurY:5 }, onComplete:removeFilter, onCompleteParams:[redBar]} );		}		public function minRedBar() {			TweenLite.to(redBarBack, 0.25, { blurFilter: { blurX:10, blurY:10 }, onComplete:removeFilter, onCompleteParams:[redBarBack]} );		}				public function adjustBlueBar(value:int) {			if (value > 30)				value = 30;			var barPercentage:Number = 14 * value / 30;			blueBar.scaleX = barPercentage;			blueBar.alpha = 1.0;			if ( barPercentage == 0 ) {				blueBar.alpha = 0.0;			}		}		public function maxBlueBar() {			TweenLite.to(blueBar, 0.25, { blurFilter: { blurX:5, blurY:5 }, onComplete:removeFilter, onCompleteParams:[blueBar]} );		}		public function minBlueBar() {			TweenLite.to(blueBarBack, 0.25, { blurFilter: { blurX:10, blurY:10 }, onComplete:removeFilter, onCompleteParams:[blueBarBack]} );		}		public function adjustGreenBar(value:int) {			if (value > 30)				value = 30;			var barPercentage:Number = 14 * value / 30;			greenBar.scaleX = barPercentage;			greenBar.alpha = 1.0;			if ( barPercentage == 0 ) {				greenBar.alpha = 0.0;			}		}		public function maxGreenBar() {			TweenLite.to(greenBar, 0.25, { blurFilter: { blurX:5, blurY:5 }, onComplete:removeFilter, onCompleteParams:[greenBar]} );		}		public function minGreenBar() {			TweenLite.to(greenBarBack, 0.25, { blurFilter: { blurX:10, blurY:10 }, onComplete:removeFilter, onCompleteParams:[greenBarBack]} );		}				public function adjustYellowBar(value:int) {			if (value > 100)				value = 100;			var barPercentage:Number = 14 * value / 100;			yellowBar.scaleX = barPercentage;			yellowBar.alpha = 1.0;			if ( barPercentage == 0 ) {				yellowBar.alpha = 0.0;			}		}				public function maxYellowBar() {			TweenLite.to(yellowBar, 0.25, { blurFilter: { blurX:5, blurY:5 }, onComplete:removeFilter, onCompleteParams:[yellowBar]} );		}		public function minYellowBar() {			TweenLite.to(yellowBarBack, 0.25, { blurFilter: { blurX:10, blurY:10 }, onComplete:removeFilter, onCompleteParams:[yellowBarBack]} );		}				public function removeFilter(object:DisplayObject) {			object.filters = new Array();		}		public function setCurrentWeapon(value:int) {			switch(value) {				case 1:					(currentWeapon as MovieClip).gotoAndStop(1);					break;				case 2:					(currentWeapon as MovieClip).gotoAndStop(2);					break;			}		}	}	}