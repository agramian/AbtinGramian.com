package AbtinPat {	import com.Engine.Sprites.IPlayer;		import flash.display.DisplayObject;	import flash.display.DisplayObject;	import flash.display.Sprite;	import flash.display.MovieClip;	import flash.geom.Point;	import flash.geom.Vector3D;			public class Player extends Sprite implements IPlayer {				public static const STATE_1_MAX_SPEED:Number = 400;		public static const STATE_1_MAX_STEERING:Number = Math.PI/15;		public static const STATE_1_MAX_ACCELERATION:Number = 300;		public static const STATE_1_MIN_ACCELERATION:Number = 30;				public static const STATE_2_MAX_SPEED:Number = 600;		public static const STATE_2_MAX_STEERING:Number = Math.PI/10;		public static const STATE_2_MAX_ACCELERATION:Number = 400;		public static const STATE_2_MIN_ACCELERATION:Number = 20;				public static const STATE_3_MAX_SPEED:Number = 800;		public static const STATE_3_MAX_STEERING:Number = Math.PI/5;		public static const STATE_3_MAX_ACCELERATION:Number = 600;		public static const STATE_3_MIN_ACCELERATION:Number = 10;				private var _tempX:Number = 0;		private var _tempY:Number = 0;		private var _tempRotation:Number = 0;				private var _maxSpeed:Number = Player.STATE_1_MAX_SPEED; //PIXELS PER SECOND		private var _maxSteering:Number = Player.STATE_1_MAX_STEERING; // RADIANS PER SECOND;		private var _maxAcceleration:Number = Player.STATE_1_MAX_ACCELERATION; //PIXELS PER SECOND		private var _minAcceleration:Number = Player.STATE_1_MIN_ACCELERATION; //PIXELS PER SECOND		//static public const handBrakeFriction:Number = .75;		static public const stoppingThreshold:Number = 0.1; //THRESHOLD FOR ROUNDING DOWN TO 0		static public const friction:Number = .95; //COEFFICIENT OF FRICTION OF THE "ROAD"				private var _velocity:Vector3D = new Vector3D();		private var _acceleration:Vector3D = new Vector3D();		protected var _angle:Number = Math.PI/2; //ANGLE IN RADIANS		private var leftGun:DisplayObject;		private var rightGun:DisplayObject;		private var shieldRed:DisplayObject;		private var shieldYellow:DisplayObject;				private var _health:int = 0;		private var _shieldHealth:int = 100;		private var _currentWeapon:int = 1;		private var _playerState:int = 1;				var speed:Number = 5; //PIXELS PER FRAME				public function Player():void {			leftGun = getChildByName("leftGun");			rightGun = getChildByName("rightGun");			shieldRed = getChildByName("shieldRed");			shieldYellow = getChildByName("shieldYellow");			shieldRed.alpha = 0;			playerState = 1;		}				public function get tempX():Number {			return _tempX;		}				public function set tempX(value:Number):void {			_tempX = value;		}				public function get tempY():Number {			return _tempY;		}				public function set tempY(value:Number):void {			_tempY = value;		}				public function get tempRotation():Number {			return _tempRotation;		}				public function set tempRotation(value:Number):void {			_tempRotation = value;		}				public function get angle():Number {			return _angle;		}				public function set angle(value:Number):void {			_angle = value;			_angle %= 2*Math.PI;			_tempRotation = _angle * (180 / Math.PI) - 90;		}				public function get velocity():Vector3D {			return _velocity;		}				public function set velocity(value:Vector3D):void {			_velocity = value;			if (_velocity.length > maxSpeed) {				var overage:Number = (_velocity.length - maxSpeed) / maxSpeed;				_velocity.scaleBy(1 / (1 + overage));			}			if (_velocity.length < stoppingThreshold) {				_velocity.x = _velocity.y = 0;			}		}				public function get acceleration():Vector3D {			return _acceleration;		}				public function set acceleration(value:Vector3D):void {			_acceleration = value;		}				public function leftGunCoords():Point {			return localToGlobal(new Point(leftGun.x, leftGun.y));		}				public function rightGunCoords():Point {			return localToGlobal(new Point(rightGun.x, rightGun.y));		}				public function set currentWeapon(value:int):void {			_currentWeapon = value;		}				public function get currentWeapon():int {			return _currentWeapon;		}		public function get frontVector():Vector3D {			return new Vector3D(Math.cos(angle-Math.PI/2),Math.sin(angle-Math.PI/2));		}				public function get directionToTurn():int {						var mouseVector:Vector3D = new Vector3D(mouseX, mouseY);			var mouseVLength:Number = mouseVector.length;			mouseVector.x /= mouseVLength;			mouseVector.y /= mouseVLength;						if (mouseVector.x > .99 ) {				return 0;			}			var tempVector:Vector3D = new Vector3D(mouseX - frontVector.x, mouseY - frontVector.y);			var tempVLength:Number = tempVector.length;			tempVector.x /= tempVLength;			tempVector.y /= tempVLength;						if ( (tempVector.x > 0 &&  tempVector.y > 0)				|| (tempVector.x < 0 &&  tempVector.y > 0) ){					return 1;				}			else if ( (tempVector.x < 0 &&  tempVector.y < 0)					|| (tempVector.x > 0 &&  tempVector.y < 0) ){					return -1;				}			return 0;					}				public function get health():int {			return _health;		}				public function set health(value:int):void {			_health = value;		}				public function get playerState():int {			return _playerState;		}				public function set playerState(value:int):void {			_playerState = value;			(leftGun as MovieClip).gotoAndStop(_playerState);			(rightGun as MovieClip).gotoAndStop(_playerState);			switch(_playerState) {				case 2:					_maxSpeed = Player.STATE_2_MAX_SPEED; 					_maxSteering = Player.STATE_2_MAX_STEERING;					_maxAcceleration = Player.STATE_2_MAX_ACCELERATION; 					_minAcceleration = Player.STATE_2_MIN_ACCELERATION; 					break;				case 3:					_maxSpeed = Player.STATE_3_MAX_SPEED; 					_maxSteering = Player.STATE_3_MAX_STEERING;					_maxAcceleration = Player.STATE_3_MAX_ACCELERATION; 					_minAcceleration = Player.STATE_3_MIN_ACCELERATION;					break;			}		}				public function get shieldHealth():int {			return _shieldHealth;		}				public function set shieldHealth(value:int):void {			_shieldHealth = value;			if (_shieldHealth == 100) {				shieldRed.alpha = 0.0;				shieldYellow.alpha = 0.25;			}			else {				shieldRed.alpha = (100 - _shieldHealth)/100;				shieldYellow.alpha = _shieldHealth / 100;			}		}				public function get maxSpeed():Number {			return _maxSpeed; 		}				public function set maxSpeed(value:Number):void {			_maxSpeed = value;		}				public function get maxSteering():Number {			return _maxSteering; 		}				public function set maxSteering(value:Number):void {			_maxSteering = value;		}				public function get maxAcceleration():Number {			return _maxAcceleration; 		}				public function set maxAcceleration(value:Number):void {			_maxAcceleration = value;		}				public function get minAcceleration():Number {			return _minAcceleration; 		}				public function set minAcceleration(value:Number):void {			_minAcceleration = value;		}				override public function get hitArea():Sprite {			return this;		}			}	}